/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * Dart mavlink generator tool. It should not be modified by hand.
 */

import 'package:mavlink/mavlink.dart';
import 'package:mavlink/common.dart';

class MAVLinkStats {
  MAVLinkStats();

  MAVLinkStats.withIgnoreRadioPackets({required this.ignoreRadioPackets});

  int receivedPacketCount = 0; // total received packet count for all sources
  int crcErrorCount = 0;
  int lostPacketCount = 0; // total lost packet count for all sources
  bool ignoreRadioPackets = false;

  // stats are nil for a system id until a packet has been received from a system
  var systemStats = <SystemStat>[]; // stats for each system that is known

  /// Check the new received packet to see if has lost someone between this and
  /// the last packet
  /// 
  /// @param packet Packet that should be checked
  void newPacket(MAVLinkPacket packet) {
    if (ignoreRadioPackets && packet.msgID == MSG_RADIO_STATUS.MAVLINK_MSG_ID_RADIO_STATUS) {
      return;
    }

    if (systemStats[packet.sysID] == null) {
      // allocate stats for systems that exist on the network
      systemStats[packet.sysID] = SystemStat();
    }
    lostPacketCount += systemStats[packet.sysID].newPacket(packet);
    receivedPacketCount++;
  }

  /// Called when a CRC error happens on the parser
  void crcError() {
    crcErrorCount++;
  }

  void resetStats() {
    crcErrorCount = 0;
    lostPacketCount = 0;
    receivedPacketCount = 0;
    systemStats = <SystemStat>[];
  }
}

/// Stat structure for every system id
class SystemStat {
  int lostPacketCount = 0; // the lost count for this source
  int receivedPacketCount = 0;

  // stats are nil for a component id until a packet has been received from a system
  var componentStats = <ComponentStat>[]; // stats for each component that is known

  int newPacket(MAVLinkPacket packet) {
    int newLostPackets = 0;
    // allocate stats for systems that exist on the network
    componentStats[packet.compID] = ComponentStat();
    newLostPackets = componentStats[packet.compID].newPacket(packet);
    lostPacketCount += newLostPackets;
    receivedPacketCount++;
    return newLostPackets;
  }

  void resetStats() {
    lostPacketCount = 0;
    receivedPacketCount = 0;
    componentStats = <ComponentStat>[];
  }
}

/// stat structure for every system id
class ComponentStat {
    int lastPacketSeq = -1;
    int lostPacketCount = 0; // the lost count for this source
    int receivedPacketCount = 0;

    int newPacket(MAVLinkPacket packet) {
        int newLostPackets = 0;
        if (hasLostPackets(packet)) {
            newLostPackets = updateLostPacketCount(packet);
        }
        lastPacketSeq = packet.seq;
        advanceLastPacketSequence(packet.seq);
        receivedPacketCount++;
        return newLostPackets;
    }

    void resetStats() {
        lastPacketSeq = -1;
        lostPacketCount = 0;
        receivedPacketCount = 0;
    }

    int updateLostPacketCount(MAVLinkPacket packet) {
        int lostPackets;
        if (packet.seq - lastPacketSeq < 0) {
            lostPackets = (packet.seq - lastPacketSeq) + 255;
        } else {
            lostPackets = (packet.seq - lastPacketSeq);
        }
        lostPacketCount += lostPackets;
        return lostPackets;
    }

    void advanceLastPacketSequence(int lastSeq) {
        // wrap from 255 to 0 if necessary
        lastPacketSeq = (lastSeq + 1) & 0xFF;
    }

    bool hasLostPackets(MAVLinkPacket packet) {
        return lastPacketSeq >= 0 && packet.seq != lastPacketSeq;
    }
}
