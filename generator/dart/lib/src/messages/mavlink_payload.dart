/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * Dart mavlink generator tool. It should not be modified by hand.
 */

import 'dart:typed_data';
import 'package:binary/binary.dart';

class MAVLinkPayload {
  static final int MAX_PAYLOAD_SIZE = 255;
  
  final _payload = ByteData(MAX_PAYLOAD_SIZE);
  int _index = 0;
  int _bytesWritten = 0;

  Uint8List getData() {
    return _payload.buffer.asUint8List();
  }

  int size() {
    return _bytesWritten;
  }

  void resetIndex() {
    _index = 0;
  }

  int getByte() {
    int result = _payload.getInt8(_index);
    _index += 1;
    return result;
  }

  int getUnsignedByte() {
    int result = _payload.getUint8(_index);
    _index += 1;
    return result;
  }

  int getShort() {
    int result = _payload.getInt16(_index, Endian.little);
    _index += 2;
    return result;
  }

  int getUnsignedShort() {
    int result = _payload.getUint16(_index, Endian.little);
    _index += 2;
    return result;
  }

  int getInt() {
    int result = _payload.getInt32(_index, Endian.little);
    _index += 4;
    return result;
  }

  int getUnsignedInt() {
    int result = _payload.getUint32(_index, Endian.little);
    _index += 4;
    return result;
  }

  BigInt getLong() {
    StringBuffer buf = StringBuffer();
    buf.write(_payload.getUint8(_index + 7).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 6).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 5).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 4).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 3).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 2).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 1).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 0).toRadixString(2).padLeft(8, '0'));
    _index += 8;
    BigInt ret = BigInt.parse(buf.toString(), radix: 2);
    return ret.toSigned(64);
  }

  BigInt getUnsignedLong(){
    StringBuffer buf = StringBuffer();
    buf.write(_payload.getUint8(_index + 7).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 6).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 5).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 4).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 3).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 2).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 1).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 0).toRadixString(2).padLeft(8, '0'));
    _index += 8;
    BigInt ret = BigInt.parse(buf.toString(), radix: 2);
    return ret.toUnsigned(64);
  }

  double getFloat() {
    double ret = _payload.getFloat32(_index, Endian.little);
    _index += 4;
    return ret;
  }

  double getDouble() {
    double ret = _payload.getFloat64(_index, Endian.little);
    _index += 8;
    return ret;
  }

  void putByte(int data) {
    _payload.setInt8(_index, Int8.assertRange(data));
    _index += 1;
    _bytesWritten += 1;
  }

  void putUnsignedByte(int data) {
    _payload.setUint8(_index, Uint8.assertRange(data));
    _index += 1;
    _bytesWritten += 1;
  }

  void putShort(int data) {
    _payload.setInt16(_index, Int16.assertRange(data), Endian.little);
    _index += 2;
    _bytesWritten += 2;
  }

  void putUnsignedShort(int data) {
    _payload.setUint16(_index, Uint16.assertRange(data), Endian.little);
    _index += 2;
    _bytesWritten += 2;
  }

  void putInt(int data) {
    _payload.setInt32(_index, Int32.assertRange(data), Endian.little);
    _index += 4;
    _bytesWritten += 4;
  }

  void putUnsignedInt(int data) {
    _payload.setUint32(_index, Uint32.assertRange(data), Endian.little);
    _index += 4;
    _bytesWritten += 4;
  }

  void putLong(BigInt data) {
    String longBits = data.toRadixString(2);
    if (longBits.startsWith(RegExp(r'-'))) {
      longBits = longBits.substring(1, longBits.length).padLeft(64, '0');
    } else {
      longBits = longBits.padLeft(64, '0');
    }
    for (int i = longBits.length; i >= 8; i-=8) {
      var sub = longBits.substring(i-8, i);
      var byte = int.parse(sub, radix: 2);
      putUnsignedByte(byte);
    }
    _index += 8;
    _bytesWritten += 8;
  }

  void putUnsignedLong(BigInt data) {
    if (data.sign == -1) {
      throw ArgumentError("Provided signed value to putUnsignedLong()");
    }
    putLong(data);
  }

  void putFloat(double data) {
    _payload.setFloat32(_index, data, Endian.little);
    _index += 4;
    _bytesWritten += 4;
  }

  void putDouble(double data) {
    _payload.setFloat64(_index, data, Endian.little);
    _index += 8;
    _bytesWritten += 8;
  }
}
