/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * Dart mavlink generator tool. It should not be modified by hand.
 */

import 'dart:typed_data';

import 'package:mavlink/mavlink.dart';

class MAVLinkPayload {
  final _payload = ByteData(255);
  int _index = 0;

  Uint8List getData() {
    return _payload.buffer.asUint8List(0, _bytesWritten);
  }

  int _bytesWritten = 0;
  int get size {
    return _bytesWritten;
  }

  void resetIndex() {
    _index = 0;
  }

  MAVInt8 getByte() {
    MAVInt8 result = MAVInt8(_payload.getInt8(_index));
    _index += result.bytes;
    return result;
  }

  MAVUint8 getUnsignedByte() {
    MAVUint8 result = MAVUint8(_payload.getUint8(_index));
    _index += result.bytes;
    return result;
  }

  MAVChar getChar() {
    MAVChar result = MAVChar(_payload.getUint8(_index));
    _index += result.bytes;
    return result;
  }

  MAVInt16 getShort() {
    MAVInt16 result = MAVInt16(_payload.getInt16(_index, Endian.little));
    _index += result.bytes;
    return result;
  }

  MAVUint16 getUnsignedShort() {
    MAVUint16 result = MAVUint16(_payload.getUint16(_index, Endian.little));
    _index += result.bytes;
    return result;
  }

  MAVInt32 getInt() {
    MAVInt32 result = MAVInt32(_payload.getInt32(_index, Endian.little));
    _index += result.bytes;
    return result;
  }

  MAVUint32 getUnsignedInt() {
    MAVUint32 result = MAVUint32(_payload.getUint32(_index, Endian.little));
    _index += result.bytes;
    return result;
  }

  BigInt _getLong() {
    StringBuffer buf = StringBuffer();
    buf.write(_payload.getUint8(_index + 7).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 6).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 5).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 4).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 3).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 2).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 1).toRadixString(2).padLeft(8, '0'));
    buf.write(_payload.getUint8(_index + 0).toRadixString(2).padLeft(8, '0'));
    _index += 8;
    return BigInt.parse(buf.toString(), radix: 2);
  }

  MAVInt64 getLong() {
    return MAVInt64(_getLong().toSigned(64));
  }

  MAVUint64 getUnsignedLong(){
    return MAVUint64(_getLong().toUnsigned(64));
  }

  MAVFloat getFloat() {
    MAVFloat result = MAVFloat(_payload.getFloat32(_index, Endian.little));
    _index += result.bytes;
    return result;
  }

  MAVDouble getDouble() {
    MAVDouble result = MAVDouble(_payload.getFloat64(_index, Endian.little));
    _index += result.bytes;
    return result;
  }

  void putByte(MAVInt8 data) {
    _payload.setInt8(_index, data.value);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }

  void putUnsignedByte(MAVUint8 data) {
    _payload.setUint8(_index, data.value);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }

  void putChar(MAVChar data) {
    putUnsignedByte(MAVUint8(data.value));
  }

  void putShort(MAVInt16 data) {
    _payload.setInt16(_index, data.value, Endian.little);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }

  void putUnsignedShort(MAVUint16 data) {
    _payload.setUint16(_index, data.value, Endian.little);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }

  void putInt(MAVInt32 data) {
    _payload.setInt32(_index, data.value, Endian.little);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }

  void putUnsignedInt(MAVUint32 data) {
    _payload.setUint32(_index, data.value, Endian.little);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }

  void _putLong(BigInt data, [int bytes = 8]) {
    String longBits = data.toRadixString(2);
    if (longBits.startsWith(RegExp(r'-'))) {
      longBits = longBits.substring(1, longBits.length).padLeft(64, '0');
    } else {
      longBits = longBits.padLeft(64, '0');
    }
    for (int i = longBits.length; i >= 8; i-=8) {
      putUnsignedByte(
        MAVUint8(
          int.parse(
            longBits.substring(i-8, i),
          radix: 2)
        )
      );
    }
    _index += bytes;
    _bytesWritten += bytes;
  }

  void putLong(MAVInt64 data) {
    _putLong(data.value);
  }

  void putUnsignedLong(MAVUint64 data) {
    _putLong(data.value);
  }

  void putFloat(MAVFloat data) {
    _payload.setFloat32(_index, data.value, Endian.little);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }

  void putDouble(MAVDouble data) {
    _payload.setFloat64(_index, data.value, Endian.little);
    _index += data.bytes;
    _bytesWritten += data.bytes;
  }
}
