/// <Remark>
/// AUTO-GENERATED FILE.  DO NOT MODIFY.
/// 
/// This class was automatically generated by the
/// C# mavlink generator tool. It should not be modified by hand.
/// </Remark>

namespace MavLinkProtocol
{
    /// <summary>
    ///     Abstract base class of any MAVLink message type.
    /// </summary>
    public abstract class MAVLinkMessage
    {
        /// <summary>
        ///     ID of this message type (payload of packet). 
        ///     Used for decoding data back into message object.
        /// </summary>
        public abstract int MsgId { get; }

        /// <summary>
        ///     Indicates a expected length of this message. 
        ///     This may be different by the use of MavLinkV1 or MavLinkV2.
        /// </summary>
        /// <remarks>
        ///     NOTE: This is not the same as the packet payload length! 
        ///     <c><see cref="MsgLength"/></c> does not consider truncation.
        /// </remarks>
        public abstract int MsgLength { get; }

        /// <summary>
        ///     Flag to indicate which MAVLink version this message is.
        ///     Can be used to determine if additional fields are filled.
        /// </summary>
        public bool IsMavlink2 { get; internal set; }

        /// <summary>
        ///     A human-readable string of the name of the message
        /// </summary>
        public abstract string Name { get; }

        /// <summary>
        ///     Method to encode the message object to a byte array.
        /// </summary>
        /// <remarks>
        ///     NOTE: This method does not include truncation of the byte array!
        /// </remarks>
        /// <returns>(new) byte array of <see cref="MsgLength"/> containing the encoded form of a message.</returns>
        internal abstract byte[] Serialize();

        /// <summary>
        ///     Method to decode a byte array to this message object.
        /// </summary>
        /// <remarks>
        ///     If the provided data array is not considered large enough (truncated),
        ///     it will be automatically appended with 0 value bytes at the end!
        /// </remarks>
        /// <param name="data">byte array containing the encoded message.</param>
        internal abstract void Deserialize(byte[] data);
    }
}
