/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

package com.MAVLink.Messages;

import java.nio.ByteBuffer;

public class MAVLinkPayload {

    private static final byte UNSIGNED_BYTE_MIN_VALUE = 0;
    private static final short UNSIGNED_BYTE_MAX_VALUE = Byte.MAX_VALUE - Byte.MIN_VALUE;

    private static final short UNSIGNED_SHORT_MIN_VALUE = 0;
    private static final int UNSIGNED_SHORT_MAX_VALUE = Short.MAX_VALUE - Short.MIN_VALUE;

    private static final int UNSIGNED_INT_MIN_VALUE = 0;
    private static final long UNSIGNED_INT_MAX_VALUE = (long) Integer.MAX_VALUE - Integer.MIN_VALUE;

    private static final long UNSIGNED_LONG_MIN_VALUE = 0;

    public static final int MAX_PAYLOAD_SIZE = 255;
    
    public final ByteBuffer payload;
    public int index;
    // Avoid bad index value when the previous parameter has zero.
    // e.g ACK msg with command = 11 and all remaining butes are zeros.
    public boolean allZeros = false;

    public MAVLinkPayload(int payloadSize) {
       if(payloadSize > MAX_PAYLOAD_SIZE) {
            payload = ByteBuffer.allocate(MAX_PAYLOAD_SIZE);
        } else {
            payload = ByteBuffer.allocate(payloadSize);
        }
    }

    public ByteBuffer getData() {
        return payload;
    }

    public int size() {
        return payload.position();
    }

    public void add(byte c) {
        payload.put(c);
    }

    public void resetIndex() {
        index = 0;
    }

    public byte getByte() {

        if (allZeros) return 0;

        byte result = 0;
        try {
            result |= (payload.get(index + 0) & 0xFF);
            index += 1;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;
    }

    public short getUnsignedByte(){

        if (allZeros) return 0;

        short result = 0;
        try {
            result |= payload.get(index + 0) & 0xFF;
            index+= 1;

        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;
    }

    public short getShort() {

        if (allZeros) return 0;

        short result = 0;
        try {
            result |= (payload.get(index + 0) & 0xFF);
            result |= (payload.get(index + 1) & 0xFF) << 8;
            index += 2;
            return result;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;
    }

    public int getUnsignedShort(){

        if (allZeros) return 0;

        int result = 0;
        try {
            result |= (payload.get(index + 0) & 0xFF);
            result |= (payload.get(index + 1) & 0xFF) << 8;
            index += 2;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;
    }

    public int getInt() {

        if (allZeros) return 0;

        int result = 0;
        try
        {
            result |= (payload.get(index + 0) & 0xFF);
            result |= (payload.get(index + 1) & 0xFF) << 8;
            result |= (payload.get(index + 2) & 0xFF) << 16;
            result |= (payload.get(index + 3) & 0xFF) << 24;
            index += 4;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;
    }

    public long getUnsignedInt(){

        if (allZeros) return 0;

        long result = 0;
        try {
            result |= (payload.get(index + 0) & 0xFF);
            result |= (payload.get(index + 1) & 0xFF) << 8;
            result |= (payload.get(index + 2) & 0xFF) << 16;
            result |= (payload.get(index + 3) & 0xFF) << 24;
            index += 4;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;
    }



    public long getLong() {

        if (allZeros) return 0;

        long result = 0;
        try {
            result |= (payload.get(index + 0) & 0xFF);
            result |= (payload.get(index + 1) & 0xFF) << 8;
            result |= (payload.get(index + 2) & 0xFF) << 16;
            result |= (payload.get(index + 3) & 0xFF) << 24;
            result |= (payload.get(index + 4) & 0xFF) << 32;
            result |= (payload.get(index + 5) & 0xFF) << 40;
            result |= (payload.get(index + 6) & 0xFF) << 48;
            result |= (payload.get(index + 7) & 0xFF) << 56;
            index += 8;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;

    }



    // MHEFNY MAVLINK
    public long getDouble() {

        if (allZeros) return 0;

        long result = 0;
        try {
            result |= (payload.get(index + 0) & 0xFF);
            result |= (payload.get(index + 1) & 0xFF) << 8;
            result |= (payload.get(index + 2) & 0xFF) << 16;
            result |= (payload.get(index + 3) & 0xFF) << 24;
            result |= (payload.get(index + 4) & 0xFF) << 32;
            result |= (payload.get(index + 5) & 0xFF) << 40;
            result |= (payload.get(index + 6) & 0xFF) << 48;
            result |= (payload.get(index + 7) & 0xFF) << 56;
            index += 8;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        Double.longBitsToDouble(result);
        return result;

    }

    public long getUnsignedLong(){
        return getLong();
    }
    
    public long getLongReverse() {

        if (allZeros) return 0;

        long result = 0;
        try
        {
            result |= (payload.get(index + 0) & 0xFF) << 56;
            result |= (payload.get(index + 1) & 0xFF) << 48;
            result |= (payload.get(index + 2) & 0xFF) << 40;
            result |= (payload.get(index + 3) & 0xFF) << 32;
            result |= (payload.get(index + 4) & 0xFF) << 24;
            result |= (payload.get(index + 5) & 0xFF) << 16;
            result |= (payload.get(index + 6) & 0xFF) << 8;
            result |= (payload.get(index + 7) & 0xFF);
            index += 8;
        }
        catch (final Exception ex)
        {
            //https://mavlink.io/en/guide/serialization.html#python-code-example
            //MAVLink 2 truncates any zero-filled bytes at the end of the payload before the message is sent and sets the packet len field appropriately (MAVLink 1 always sends all bytes)
            allZeros = true;
        }
        return result;

    }

    public float getFloat() {
        return Float.intBitsToFloat(getInt());
    }
    
    public void putByte(byte data) {
        add(data);
    }

    public void putUnsignedByte(short data){
        if(data < UNSIGNED_BYTE_MIN_VALUE || data > UNSIGNED_BYTE_MAX_VALUE){
            throw new IllegalArgumentException("Value is outside of the range of an unsigned byte: " + data);
        }

        putByte((byte) data);
    }

    public void putShort(short data) {
        add((byte) (data >> 0));
        add((byte) (data >> 8));
    }

    public void putUnsignedShort(int data){
        if(data < UNSIGNED_SHORT_MIN_VALUE || data > UNSIGNED_SHORT_MAX_VALUE){
            throw new IllegalArgumentException("Value is outside of the range of an unsigned short: " + data);
        }

        putShort((short) data);
    }

    public void putInt(int data) {
        add((byte) (data >> 0));
        add((byte) (data >> 8));
        add((byte) (data >> 16));
        add((byte) (data >> 24));
    }

    public void putUnsignedInt(long data){
        if(data < UNSIGNED_INT_MIN_VALUE || data > UNSIGNED_INT_MAX_VALUE){
            throw new IllegalArgumentException("Value is outside of the range of an unsigned int: " + data);
        }

        putInt((int) data);
    }


    //MHEFNY MAVLINK
    public void putDouble(double ddata) {

        long data = Double.doubleToLongBits(ddata);

        add((byte) (data >> 0));
        add((byte) (data >> 8));
        add((byte) (data >> 16));
        add((byte) (data >> 24));
        add((byte) (data >> 32));
        add((byte) (data >> 40));
        add((byte) (data >> 48));
        add((byte) (data >> 56));
    }


    public void putLong(long data) {
        add((byte) (data >> 0));
        add((byte) (data >> 8));
        add((byte) (data >> 16));
        add((byte) (data >> 24));
        add((byte) (data >> 32));
        add((byte) (data >> 40));
        add((byte) (data >> 48));
        add((byte) (data >> 56));
    }


    public void putUnsignedLong(long data){
        if(data < UNSIGNED_LONG_MIN_VALUE){
            throw new IllegalArgumentException("Value is outside of the range of an unsigned long: " + data);
        }

        putLong(data);
    }

    public void putFloat(float data) {
        putInt(Float.floatToIntBits(data));
    }

}
